{"name":"Rage","type":"script","author":"RoD9QmAeldkRTqNP","img":"icons/creatures/abilities/mouth-teeth-human.webp","scope":"global","command":"game.dnd5e.macros.rollItem(\"Rage\")\n\n// Enable all rage effects\nconst effectNames = [\"Rage\", \"Spirit of the Elk\"];\nconst filter = token.actor.effects.filter(i => effectNames.includes(i.data.label));\nconst updates = filter.map(i => ({_id: i.id, disabled: !i.data.disabled}));\nawait token.actor.updateEmbeddedDocuments(\"ActiveEffect\", updates);\n\n// Wild Surge\nconst surge = actor.items.getName(\"Wild Surge\");\nif(surge.hasMacro()) await surge.executeMacro();\nelse await surge.roll();","folder":null,"sort":0,"permission":{"default":0,"RoD9QmAeldkRTqNP":3},"flags":{"core":{"sourceId":"Macro.sjxXx1F9XqgWITyQ"}},"_id":"AsjuPafHwE0D0jqs"}
{"_id":"XSuQe3bQ2Kx6yDq5","name":"Divine Smite","type":"script","author":"7VbuHmckfo5rIhG3","img":"icons/skills/melee/weapons-crossed-swords-teal.webp","scope":"global","command":"/*\n * The Smite macro emulates the Divine Smite feature of Paladins.\n * Make your regular attack and then if you choose to \n * use Divine Smite, run this macro.\n *\n * User will be prompted to select a spell slot.\n * Smiting a fiend or undead increases number of damage dice.\n * \n * If a token is not selected, the macro will default back to\n * the default character for the Actor.\n * To execute the macro a target MUST be specified. \n */\n\n(() => {\n\n//Configurable variables\nlet maxSpellSlot = 10; //  Highest spell-slot level that may be used.\nlet affectedCreatureTypes = [\"fiend\", \"undead\", \"undead (shapechanger)\"]; //  Creature types that take extra damage.\n\n// Use token selected, or default character for the Actor if none is.\nlet s_actor = canvas.tokens.controlled[0]?.actor || game.user.character;     \n\n// Flag for selected slot type\nlet pactSlot = false;\n\n// Verifies if the actor can smite.\nif (s_actor?.data.items.find(i => i.name === \"Divine Smite\") === undefined){\n    return ui.notifications.error(`No valid actor selected that can use this macro.`);\n}\n\nlet confirmed = false;\nif (hasAvailableSlot(s_actor)) {\n\n    // Get options for available slots\n    let optionsText = \"\";\n    let i = 1;\n    for (; i < maxSpellSlot; i++) {\n        const slots = getSpellSlots(s_actor, i, false);\n        if (slots.value > 0) {\n            const level = CONFIG.DND5E.spellLevels[i];\n            const label = game.i18n.format('DND5E.SpellLevelSlot', {level: level, n: slots.value});\n            optionsText += `<option value=\"${i}\">${label}</option>`;\n        }\n    }\n\n    // Check for Pact slot\n    const slots = getSpellSlots(s_actor, 0, true);\n    if(slots.value > 0) {\n        i++;\n        const level = CONFIG.DND5E.spellLevels[slots.level];\n        const label = 'Pact: ' + game.i18n.format('DND5E.SpellLevelSlot', {level: level, n: slots.value});\n        optionsText += `<option value=\"${i}\">${label}</option>`;\n    }\n\n    // Create a dialogue box to select spell slot level to use when smiting.\n    new Dialog({\n        title: \"Divine Smite: Usage Configuration\",\n        content: `\n        <form id=\"smite-use-form\">\n            <p>` + game.i18n.format(\"DND5E.AbilityUseHint\", {name: \"Divine Smite\", type: \"feature\"}) + `</p>\n            <div class=\"form-group\">\n                <label>Spell Slot Level</label>\n                <div class=\"form-fields\">\n                    <select name=\"slot-level\">` + optionsText + `</select>\n                </div>\n            </div>\n\n            <div class=\"form-group\">\n                <label class=\"checkbox\">\n                <input type=\"checkbox\" name=\"consumeCheckbox\" checked/>` + game.i18n.localize(\"DND5E.SpellCastConsume\") + `</label>\n            </div>\n\n            <div class=\"form-group\">\n                <label class=\"checkbox\">\n                <input type=\"checkbox\" name=\"criticalCheckbox\"/>` + game.i18n.localize(\"DND5E.CriticalHit\") + \"?\" + `</label>\n            </div>\n        </form>\n        `,\n        buttons: {\n            one: {\n                icon: '<i class=\"fas fa-check\"></i>',\n                label: \"SMITE!\",\n                callback: () => confirmed = true\n            },\n            two: {\n                icon: '<i class=\"fas fa-times\"></i>',\n                label: \"Cancel\",\n                callback: () => confirmed = false\n            }\n        },\n        default: \"Cancel\",\n        close: html => {\n            if (confirmed) {\n                let slotLevel = parseInt(html.find('[name=slot-level]')[0].value);\n                if(slotLevel > maxSpellSlot) {\n                    slotLevel = actor.data.data.spells.pact.level;\n                    pactSlot = true;\n                }\n                const criticalHit = html.find('[name=criticalCheckbox]')[0].checked;\t\t\t\t\n                const consumeSlot = html.find('[name=consumeCheckbox]')[0].checked;\n                smite(s_actor, slotLevel, criticalHit, consumeSlot, pactSlot);\n            }\n        }\n    }).render(true);\n\n} else {\n    return ui.notifications.error(`No spell slots available to use this feature.`);    \n}\n\n/**\n * Gives the spell slot information for a particular actor and spell slot level.\n * @param {Actor5e} actor - the actor to get slot information from.\n * @param {integer} level - the spell slot level to get information about. level 0 is deprecated.\n * @param {boolean} isPact - whether the spell slot is obtained through pact.\n * @returns {object} contains value (number of slots remaining), max, and override.\n */\nfunction getSpellSlots(actor, level, isPact) {\n    if(isPact == false) {\n        return actor.data.data.spells[`spell${level}`];\n    }\n    else {\n        return actor.data.data.spells.pact;\n    }\n}\n\n/**\n * Returns whether the actor has any spell slot left.\n * @param {Actor5e} actor - the actor to get slot information from.\n * @returns {boolean} True if any spell slots of any spell level are available to be used.\n */\n function hasAvailableSlot(actor) {\n    for (let slot in actor.data.data.spells) {\n        if (actor.data.data.spells[slot].value > 0) {\n            return true;\n        }\n    }\n    return false;\n }\n\n/**\n * Use the controlled token to smite the targeted token.\n * @param {Actor5e} actor - the actor that is performing the action.\n * @param {integer} slotLevel - the spell slot level to use when smiting.\n * @param {boolean} criticalHit - whether the hit is a critical hit.\n * @param {boolean} consume - whether to consume the spell slot.\n * @param {boolean} isPact - whether the spell slot used is obtained through pact.\n */\nasync function smite(actor, slotLevel, criticalHit, consume, isPact) {\n    let targets = game.user.targets;\n\n    let chosenSpellSlots = getSpellSlots(actor, slotLevel, isPact);\n\n    if (chosenSpellSlots.value < 1) {\n        ui.notifications.error(\"No spell slots of the required level available.\");\n        return;\n    }\n    if (targets.size !== 1) {\n        ui.notifications.error(\"You must target exactly one token to Smite.\");\n        return;\n    }\n\n    const [target] = targets;\n    let numDice = Math.min(5, slotLevel + 1);\n    let type = target.actor.data.data.details.type?.value;\n    if (affectedCreatureTypes.includes(type)) numDice += 1;\n    if (criticalHit) numDice *= 2;\n    const flavor = `Macro Divine Smite - ${game.i18n.localize(\"DND5E.DamageRoll\")} (${game.i18n.localize(\"DND5E.DamageRadiant\")})`;\n    let damageRoll = new Roll(`${numDice}d8`);\n\n    let targetActor = game.user.targets.values().next().value.actor;\n    \n    if (targetActor.permission !== CONST.ENTITY_PERMISSIONS.OWNER) {\n        // We need help applying the damage, so make a roll message for right-click convenience.\n        await damageRoll.toMessage({\n            speaker: ChatMessage.getSpeaker(),\n            flavor: `${actor.name} smited ${targetActor.data.name}.<br>${flavor}\n            <p><em>Manually apply (or right-click) ${damageRoll.result} HP of damage to ${targetActor.data.name}</em></p>` });\n    }\n    else {\n        // We can apply damage automatically, so just show a normal chat message.\n        await damageRoll.toMessage({\n            speaker: ChatMessage.getSpeaker(),\n            flavor: `${actor.name} smited ${targetActor.data.name}.<br>${flavor}\n            <p><em>${targetActor.data.name} has taken ${damageRoll.result} HP of damage.</em></p>` });\n        targetActor.update({\"data.attributes.hp.value\" : targetActor.data.data.attributes.hp.value - damageRoll.result});\n    }\n\n    if (consume){\n        let objUpdate = new Object();\n        if(isPact == false) {\n            objUpdate['data.spells.spell' + slotLevel + '.value'] = chosenSpellSlots.value - 1;\n        }\n        else {\n            objUpdate['data.spells.pact.value'] = chosenSpellSlots.value - 1;\n        }\n        \n        actor.update(objUpdate);\n    }\n}\n\n})();","folder":null,"sort":0,"permission":{"default":0,"7VbuHmckfo5rIhG3":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.iJxZiHJqopxnfHX4"}}}
{"name":"Potion of Healing","type":"script","author":"7VbuHmckfo5rIhG3","img":"icons/consumables/potions/potion-tube-corked-red.webp","scope":"global","command":"/*\n * This macro helps you choose your healing potions\n * To use, select your token on the map and then run this macro\n * If you have only one type of healing potion on your character, it will be used\n * If you have several types of healing potions on your character, you will be asked which one to use\n*/\n\n// Only one token can be selected\nif(canvas.tokens.controlled.length != 1){\n    ui.notifications.error(\"Please select a single token.\");\n    return;\n}\n\n// Definitions\nlet s_actor = canvas.tokens.controlled[0].actor\nconst potions = s_actor.itemTypes.consumable.filter(i => i.data.data.consumableType === \"potion\" && i.data.data.actionType === \"heal\");\n\nif(potions.length === 0){\n    ui.notifications.error(\"You don't have any healing potions.\");\n    return;\n}\n\nif(potions.length === 1){\n    s_actor.items.get(potions[0].id).roll();\n    return;\n}\n\n// Create the options available for the prompt\nlet confirmed = false;\nconst optionsText = potions.reduce((acc, e) => acc += `<option value=\"${e.id}\">${e.data.name}</option>`, ``);\n\n// Create a dialogue box to select from available potions\nnew Dialog({\n    title: \"Macro: Healing Potion\",\n    content: `\n    <form id=\"use-potion-form\">\n        <p>` + game.i18n.format(\"Select which potion you'd like to use.\") + `</p>\n        <div class=\"form-group\">\n            <label>Potion Strength</label>\n            <div class=\"form-fields\">\n                <select name=\"potion-strength\">` + optionsText + `</select>\n            </div>\n        </div>\n        <div style=\"height:12px;\"></div>\n    </form>\n    `,\n    buttons: {\n        one: {\n            icon: '<i class=\"fas fa-check\"></i>',\n            label: \"Heal\",\n            callback: () => confirmed = true\n        },\n        two: {\n            icon: '<i class=\"fas fa-times\"></i>',\n            label: \"Cancel\",\n            callback: () => confirmed = false\n        }\n    },\n    default: \"Cancel\",\n    close: html => {\n        if (confirmed) {\n            const id = html[0].querySelector(`[name=potion-strength]`).value;\n            s_actor.items.get(id).roll();\n        }\n    }\n}).render(true);","folder":null,"sort":0,"permission":{"default":0,"7VbuHmckfo5rIhG3":3},"flags":{"dnd5e":{"itemMacro":true},"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.01bstHClwEgvOCPz"}},"_id":"bnxH0hvOuHjmarGU"}
{"_id":"couCfqHU2tDB1RBn","name":"Lay on Hands","type":"script","author":"EHpONhziSoZpUpN3","img":"icons/magic/light/hand-sparks-smoke-green.webp","scope":"global","command":"/*\n * Apply lay-on-hands feat to a target character.\n * Asks the player how many HP to heal and verifies the\n * entered value is within range before marking down usage counter.\n * If the player has OWNER permissions of target (such as GM or\n * self-heal) the HP are applied automatically; \n * otherwise, a 'roll' message appears allowing the target\n * character to right-click to apply healing.\n*/\n\n(async () => {\n\nconst layName = \"Lay on Hands\";\nlet confirmed = false;\nlet actorData = actor || canvas.tokens.controlled[0] || game.user.character;\nlet featData = actorData ? actorData.items.find(i => i.name===layName) : null;\n\nif(actorData == null || featData == null) \n    ui.notifications.warn(`Selected hero must have ${layName} feat.`);\nelse if (game.user.targets.size !== 1)\n    ui.notifications.warn(`Please target one token.`);\nelse\n{\n    let featUpdate = duplicate(featData);\n    let targetActor = game.user.targets.values().next().value.actor;\n    let maxHeal = Math.clamped(featUpdate.data.uses.value, 0, \n        targetActor.data.data.attributes.hp.max - targetActor.data.data.attributes.hp.value);\n\n    let content = `<p><em>${actorData.name} lays hands on ${targetActor.data.name}.</em></p>\n                    <p>How many HP do you want to restore to ${targetActor.data.name}?</p>\n                    <form>\n                        <div class=\"form-group\">\n                            <label for=\"num\">HP to Restore: (Max = ${maxHeal})</label>\n                            <input id=\"num\" name=\"num\" type=\"number\" min=\"0\" max=\"${maxHeal}\"></input>\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"flavor\">Flavor:</label>\n                            <input id=\"flavor\" name=\"flavor\" value=\"${featUpdate.data.chatFlavor}\"></input>\n                        </div>\n                    </form>`;\n    new Dialog({\n        title: \"Lay on Hands Healing\",\n        content: content,      \n        buttons: {\n            heal: { label: \"Heal!\", callback: () => confirmed = true },\n            cancel: { label: \"Cancel\", callback: () => confirmed = false }\n        },\n        default: \"heal\",\n\n        close: html => {\n            (async () => {\n            if (confirmed) \n            {\n                let number = Math.floor(Number(html.find('#num')[0].value));\n                if (number < 1 || number > maxHeal)\n                    ui.notifications.warn(`Invalid number of charges entered = ${number}. Aborting action.`);\n                else\n                {\n                    let flavor = `<strong>${html.find('#flavor')[0].value}</strong><br>`;\n                    if (targetActor.permission !== CONST.ENTITY_PERMISSIONS.OWNER)\n                        // We need help applying the healing, so make a roll message for right-click convenience.\n                        await new Roll(`${number}`).toMessage({\n                            speaker: ChatMessage.getSpeaker(),\n                            flavor: `${actorData.name} lays hands on ${targetActor.data.name}.<br>${flavor}\n                            <p><em>Manually apply ${number} HP of healing to ${targetActor.data.name}</em></p>` });\n                    else {\n                        // We can apply healing automatically, so just show a normal chat message.\n                        ChatMessage.create({\n                            speaker: ChatMessage.getSpeaker(),\n                            content: `${actorData.name} lays hands on ${targetActor.data.name} for ${number} HP.<br>${flavor}`\n                        });\n                        await targetActor.update({\"data.attributes.hp.value\" : targetActor.data.data.attributes.hp.value + number});\n                    }\n                     \n                    //Update the value under \"Features\"\n                    featUpdate.data.uses.value = featUpdate.data.uses.value - number;\n                    await actorData.items.getName(layName).update({ \"data.uses.value\" : featUpdate.data.uses.value });\n\n                    //Update resource counter only if the \"Lay on Hands\" feature is set to consume it\n                    let resString = featUpdate.data.consume.target;\n                    if(resString.indexOf('resources') >= 0) {\n                       await actorData.update({\n                           data: { [featUpdate.data.consume.target] : featUpdate.data.uses.value }\n                       });\n                    }\n\n                    if (actorData.sheet.rendered) {\n                       // Update the actor sheet if it is currently open\n                       await actorData.render(true);\n                    }\n                };\n            }\n            })();\n        }\n    }).render(true);\n}\n})();","folder":null,"sort":0,"permission":{"default":0,"EHpONhziSoZpUpN3":3},"flags":{"core":{"sourceId":"Macro.FyepIdR9xjN16pHc"}}}
{"name":"Testing Macro","type":"script","author":"EHpONhziSoZpUpN3","img":"icons/sundries/misc/key-short-red.webp","scope":"global","command":"let s_actor = canvas.tokens.controlled[0]?.actor || game.user.character;\nconsole.log(s_actor);","folder":null,"sort":0,"permission":{"default":0,"EHpONhziSoZpUpN3":3},"flags":{"core":{"sourceId":"Macro.4PnyeFE870GDJVyb"}},"_id":"qUvzdS38EO9gnuzW"}
{"_id":"rP81zDVfNTzqnRhf","name":"Toggle Rage","type":"script","author":"EHpONhziSoZpUpN3","img":"systems/dnd5e/icons/skills/red_10.jpg","scope":"actor","command":"// Define names of effects to toggle\nconst effectNames = [\"Rage\", \"Spirit of the Elk\"];\n\nconst filter = token.actor.effects.filter(i => effectNames.includes(i.data.label));\nconst updates = filter.map(i => ({_id: i.id, disabled: !i.data.disabled}));\nawait token.actor.updateEmbeddedDocuments(\"ActiveEffect\", updates);","folder":null,"sort":0,"permission":{"default":0,"EHpONhziSoZpUpN3":3},"flags":{"dnd5e":{"effectMacro":true},"core":{"sourceId":"Macro.MXOslJDsChyqBfS0"}}}
{"_id":"rP81zDVfNTzqnRhf","name":"Toggle Rage","type":"script","author":"EHpONhziSoZpUpN3","img":"icons/skills/wounds/injury-body-pain-gray.webp","scope":"actor","command":"// Define names of effects to toggle\nconst effectNames = [\"Rage\", \"Spirit of the Elk\"];\n\nconst filter = token.actor.effects.filter(i => effectNames.includes(i.data.label));\nconst updates = filter.map(i => ({_id: i.id, disabled: !i.data.disabled}));\nawait token.actor.updateEmbeddedDocuments(\"ActiveEffect\", updates);","folder":null,"sort":0,"flags":{"dnd5e":{"effectMacro":true},"core":{"sourceId":"Macro.MXOslJDsChyqBfS0"}},"ownership":{"default":0,"EHpONhziSoZpUpN3":3},"_stats":{"systemId":"dnd5e","systemVersion":"2.0.3","coreVersion":"10.286","createdTime":null,"modifiedTime":1665008296106,"lastModifiedBy":"UjfixXuqstXNdypa"}}
{"_id":"XSuQe3bQ2Kx6yDq5","name":"Divine Smite","type":"script","author":"7VbuHmckfo5rIhG3","img":"icons/skills/melee/weapons-crossed-swords-teal.webp","scope":"global","command":"// DIVINE SMITE\n// required modules: none.\n\nconst rollData = foundry.utils.duplicate(actor.getRollData());\nconst inputs = Object.entries(rollData.spells).filter(s => {\n    return s[1].value > 0;\n}).map(([key, { value, max }]) => {\n    const crd = key === \"pact\" ? \"Pact Slot\" : nth(Number(key.at(-1)));\n    return [key, crd, value, max];\n});\nif ( inputs.length < 1 ) {\n    ui.notifications.warn(\"You have no spell slots remaining.\");\n    return;\n}\n\nconst options = inputs.reduce((acc, [key, crd, value, max]) => {\n    return acc + `<option value=\"${key}\">${crd} (${value}/${max})</option>`;\n}, \"\");\n\nconst content = `\n<form>\n    <div class=\"form-group\">\n        <label style=\"flex: 1;\">Spell Slot:</label>\n        <div class=\"form-fields\">\n            <select id=\"smite-slot\">${options}</select>\n            <input type=\"checkbox\" id=\"extra-die\"></input>\n            <label for=\"extra-die\" style=\"white-space: nowrap;\">Extra die</label>\n        </div>\n    </div>\n</form>`;\n\nnew Dialog({\n    title: \"Divine Smite\",\n    content,\n    buttons: {\n        smite: {\n            icon: \"<i class='fas fa-gavel'></i>\",\n            label: \"Smite!\",\n            callback: async (html) => await rollDamage(html)\n        }\n    }\n}).render(true);\n\nfunction nth(n){return n + ([\"st\",\"nd\",\"rd\"][((n+90)%100-10)%10-1]||\"th\")}\n\nasync function rollDamage(html){\n    const slot = html[0].querySelector(\"#smite-slot\").value;\n    const extra = html[0].querySelector(\"#extra-die\").checked;\n    const level = slot === \"pact\" ? rollData.spells[\"pact\"].level : Number(slot.at(-1));\n    const dice = Math.min(5, 1 + level) + (extra ? 1 : 0);\n    const formula = `${dice}d8`;\n\n    const damageRoll = await new Item.implementation({\n        type: \"feat\",\n        name: \"Divine Smite\",\n        system: { damage: { parts: [[formula, \"radiant\"]] } }\n    }, { parent: actor }).rollDamage();\n    if ( !damageRoll ) return;\n    const value = rollData.spells[slot].value - 1;\n    return actor.update({ [`system.spells.${slot}.value`]: value });\n}","folder":null,"sort":0,"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.iJxZiHJqopxnfHX4"}},"ownership":{"default":0,"7VbuHmckfo5rIhG3":3},"_stats":{"systemId":"dnd5e","systemVersion":"2.0.3","coreVersion":"10.286","createdTime":null,"modifiedTime":1665009204217,"lastModifiedBy":"UjfixXuqstXNdypa"}}
{"_id":"couCfqHU2tDB1RBn","name":"Lay on Hands","type":"script","author":"EHpONhziSoZpUpN3","img":"icons/magic/light/hand-sparks-smoke-green.webp","scope":"global","command":"// LAY ON HANDS\n// required modules: itemacro\n\nconst { value } = item.system.uses;\nif ( value < 1 ) {\n    ui.notifications.warn(`${item.name} has no uses left.`);\n    return;\n}\nconst content = `\n<p>Lay on Hands has ${value} uses left.</p>\n<form>\n    <div class=\"form-group\">\n        <label for=\"num\">Hit points to restore:</label>\n        <div class=\"form-fields\">\n            <input id=\"num\" type=\"number\" value=\"1\"></input>\n        </div>\n    </div>\n</form>`;\n\nconst buttons = {\n    heal: {\n        icon: \"<i class='fa-solid fa-hand-holding-heart'></i>\",\n        label: \"Heal!\",\n        callback: async (html) => {\n            const number = Number(html[0].querySelector(\"#num\").value);\n            if ( number < 1 || number > value ) {\n                ui.notifications.warn(\"Invalid number.\");\n                return;\n            }\n            await new Roll(`${number}`).toMessage({\n                speaker: ChatMessage.getSpeaker({ actor }),\n                flavor: item.name\n            });\n            return item.update({ \"system.uses.value\": value - number });\n        }\n    }\n}\nif ( value >= 5 ) {\n    buttons.cure = {\n        icon: \"<i class='fa-solid fa-virus'></i>\",\n        label: \"Cure!\",\n        callback: async (html) => {\n            await ChatMessage.create({\n                content: `${actor.name} cures a disease or poison.`,\n                speaker: ChatMessage.getSpeaker({ actor })\n            });\n            return item.update({ \"system.uses.value\": value - 5 });\n        }\n    }\n}\n\nnew Dialog({ title: \"Lay on Hands\", content, buttons }).render(true);","folder":null,"sort":0,"flags":{"core":{"sourceId":"Macro.FyepIdR9xjN16pHc"}},"ownership":{"default":0,"EHpONhziSoZpUpN3":3},"_stats":{"systemId":"dnd5e","systemVersion":"2.0.3","coreVersion":"10.286","createdTime":null,"modifiedTime":1665009234692,"lastModifiedBy":"UjfixXuqstXNdypa"}}
{"_id":"couCfqHU2tDB1RBn","name":"Lay on Hands","type":"script","author":"EHpONhziSoZpUpN3","img":"icons/magic/light/orbs-hand-gray.webp","scope":"global","command":"// LAY ON HANDS\n// required modules: itemacro\n\nconst { value } = item.system.uses;\nif ( value < 1 ) {\n    ui.notifications.warn(`${item.name} has no uses left.`);\n    return;\n}\nconst content = `\n<p>Lay on Hands has ${value} uses left.</p>\n<form>\n    <div class=\"form-group\">\n        <label for=\"num\">Hit points to restore:</label>\n        <div class=\"form-fields\">\n            <input id=\"num\" type=\"number\" value=\"1\"></input>\n        </div>\n    </div>\n</form>`;\n\nconst buttons = {\n    heal: {\n        icon: \"<i class='fa-solid fa-hand-holding-heart'></i>\",\n        label: \"Heal!\",\n        callback: async (html) => {\n            const number = Number(html[0].querySelector(\"#num\").value);\n            if ( number < 1 || number > value ) {\n                ui.notifications.warn(\"Invalid number.\");\n                return;\n            }\n            await new Roll(`${number}`).toMessage({\n                speaker: ChatMessage.getSpeaker({ actor }),\n                flavor: item.name\n            });\n            return item.update({ \"system.uses.value\": value - number });\n        }\n    }\n}\nif ( value >= 5 ) {\n    buttons.cure = {\n        icon: \"<i class='fa-solid fa-virus'></i>\",\n        label: \"Cure!\",\n        callback: async (html) => {\n            await ChatMessage.create({\n                content: `${actor.name} cures a disease or poison.`,\n                speaker: ChatMessage.getSpeaker({ actor })\n            });\n            return item.update({ \"system.uses.value\": value - 5 });\n        }\n    }\n}\n\nnew Dialog({ title: \"Lay on Hands\", content, buttons }).render(true);","folder":null,"sort":0,"flags":{"core":{"sourceId":"Macro.FyepIdR9xjN16pHc"}},"ownership":{"default":0,"EHpONhziSoZpUpN3":3},"_stats":{"systemId":"dnd5e","systemVersion":"2.0.3","coreVersion":"10.286","createdTime":null,"modifiedTime":1665009343042,"lastModifiedBy":"UjfixXuqstXNdypa"}}
